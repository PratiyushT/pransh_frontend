
-- =============================================================
-- SHIPPING ADDRESSES TABLE
-- =============================================================

drop table if exists public.addresses cascade;

create table public.addresses (
  id bigint generated always as identity primary key, -- Internal address ID
  profile_id bigint not null references public.profiles(id) on delete cascade, -- Link to profiles
  label text,               -- E.g., "Home", "Work", etc.
  street text not null,
  city text not null,
  state text,
  postal_code text not null,
  country text not null,
  phone_number text not null, -- ✅ Required
  is_default boolean default false, -- ✅ Only one default allowed
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now()
);

alter table public.addresses enable row level security;

-- RLS Policies for addresses
create policy "Allow user to select their own addresses"
on public.addresses
for select
using (
  profile_id in (select id from public.profiles where user_id = auth.uid())
);

create policy "Allow user to insert own address"
on public.addresses
for insert
with check (
  profile_id in (select id from public.profiles where user_id = auth.uid())
);

create policy "Allow user to update own addresses"
on public.addresses
for update
using (
  profile_id in (select id from public.profiles where user_id = auth.uid())
)
with check (
  profile_id in (select id from public.profiles where user_id = auth.uid())
);

-- Function to auto-update updated_at on update
create or replace function update_address_updated_at()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

drop trigger if exists set_address_updated_at on public.addresses;

create trigger set_address_updated_at
before update on public.addresses
for each row
execute procedure update_address_updated_at();

-- ✅ NEW: Function to auto-set created_at and updated_at on insert
create or replace function set_address_created_and_updated_at()
returns trigger as $$
begin
  new.created_at = now();
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

drop trigger if exists set_address_created_and_updated_at on public.addresses;

create trigger set_address_created_and_updated_at
before insert on public.addresses
for each row
execute procedure set_address_created_and_updated_at();

-- Unique index to enforce only one default address per user
create unique index if not exists one_default_address_per_profile
on public.addresses (profile_id)
where is_default = true;

