-- =============================================================
-- PROFILES TABLE
-- =============================================================

drop table if exists public.profiles cascade;

create table public.profiles (
  id bigint generated always as identity primary key, -- Internal profile ID
  user_id uuid not null references auth.users(id) on delete cascade, -- Link to auth.users
  full_name text not null,    -- ✅ Required at signup
  email text not null,        -- ✅ Required at signup
  phone_number text,          -- ⚡ Optional at signup
  is_email_confirmed boolean default false, -- ✅ Track if email verified
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now()
);

alter table public.profiles enable row level security;

-- RLS Policies for profiles
create policy "Allow user to select their own profile"
on public.profiles
for select
using (auth.uid() = user_id);

create policy "Allow user to update editable fields"
on public.profiles
for update
using (auth.uid() = user_id)
with check (
  id = id and
  user_id = user_id and
  full_name = full_name -- ❌ full_name locked after signup
);

create policy "Allow service role to insert profile"
on public.profiles
for insert
to service_role
with check (true);

-- Function to auto-update updated_at on update
create or replace function update_profile_updated_at()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

drop trigger if exists set_profile_updated_at on public.profiles;

create trigger set_profile_updated_at
before update on public.profiles
for each row
execute procedure update_profile_updated_at();

-- ✅ NEW: Function to auto-set created_at and updated_at on insert
create or replace function set_profile_created_and_updated_at()
returns trigger as $$
begin
  new.created_at = now();
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

drop trigger if exists set_profile_created_and_updated_at on public.profiles;

create trigger set_profile_created_and_updated_at
before insert on public.profiles
for each row
execute procedure set_profile_created_and_updated_at();

